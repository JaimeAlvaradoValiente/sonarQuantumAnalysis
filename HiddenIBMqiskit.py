from qiskit import QuantumCircuit, execute, Aer, QuantumRegister, ClassicalRegister
import math


qreg = QuantumRegister(8)
creg = ClassicalRegister(8)
qc = QuantumCircuit(qreg, creg)

qc.h(qreg[0])
qc.h(qreg[1])
qc.h(qreg[2])
qc.h(qreg[3])
qc.h(qreg[4])
qc.h(qreg[5])
qc.h(qreg[6])
qc.h(qreg[7])

auxiliary_qubit = QuantumRegister(1)
qc.add_register(auxiliary_qubit)

qc.cx(auxiliary_qubit[0], qreg[0])
qc.cx(auxiliary_qubit[0], qreg[4])
qc.cx(auxiliary_qubit[0], qreg[1])
qc.cx(auxiliary_qubit[0], qreg[5])
qc.cx(auxiliary_qubit[0], qreg[2])
qc.cx(auxiliary_qubit[0], qreg[6])
qc.cx(auxiliary_qubit[0], qreg[3])
qc.cx(auxiliary_qubit[0], qreg[7])

qc.cu1(-math.pi / 2, qreg[0], qreg[1])
qc.h(qreg[1])
qc.cu1(-math.pi / 4, qreg[0], qreg[2])
qc.cu1(-math.pi / 2, qreg[1], qreg[2])
qc.h(qreg[2])
qc.cu1(-math.pi / 8, qreg[0], qreg[3])
qc.cu1(-math.pi / 4, qreg[1], qreg[3])
qc.cu1(-math.pi / 2, qreg[2], qreg[3])
qc.h(qreg[3])
qc.cu1(-math.pi / 16, qreg[0], qreg[4])
qc.cu1(-math.pi / 8, qreg[1], qreg[4])
qc.cu1(-math.pi / 4, qreg[2], qreg[4])
qc.cu1(-math.pi / 2, qreg[3], qreg[4])
qc.h(qreg[4])
qc.cu1(-math.pi / 32, qreg[0], qreg[5])
qc.cu1(-math.pi / 16, qreg[1], qreg[5])
qc.cu1(-math.pi / 8, qreg[2], qreg[5])
qc.cu1(-math.pi / 4, qreg[3], qreg[5])
qc.cu1(-math.pi / 2, qreg[4], qreg[5])
qc.h(qreg[5])
qc.cu1(-math.pi / 64, qreg[0], qreg[6])
qc.cu1(-math.pi / 32, qreg[1], qreg[6])
qc.cu1(-math.pi / 16, qreg[2], qreg[6])
qc.cu1(-math.pi / 8, qreg[3], qreg[6])
qc.cu1(-math.pi / 4, qreg[4], qreg[6])
qc.cu1(-math.pi / 2, qreg[5], qreg[6])
qc.h(qreg[6])
qc.cu1(-math.pi / 128, qreg[0], qreg[7])
qc.cu1(-math.pi / 64, qreg[1], qreg[7])
qc.cu1(-math.pi / 32, qreg[2], qreg[7])
qc.cu1(-math.pi / 16, qreg[3], qreg[7])
qc.cu1(-math.pi / 8, qreg[4], qreg[7])
qc.cu1(-math.pi / 4, qreg[5], qreg[7])
qc.cu1(-math.pi / 2, qreg[6], qreg[7])
qc.h(qreg[7])

qc.measure(qreg, creg)

backend = Aer.get_backend("qasm_simulator")
shots = int(1024)
job = execute(qc, backend, shots=shots)
result = job.result()
counts = result.get_counts()
return counts

